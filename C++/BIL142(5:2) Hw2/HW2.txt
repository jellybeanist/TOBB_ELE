#include <stdlib.h>
#include <iostream>
#include <string>
using namespace std;

//Aşağıda bir bağlı liste(linkedlist) veri yapısı için sınıf arayüzleri verilmiştir.
// Her üye fonksiyonun yanında yorum olarak öğrenci numarası ile ilgili kriter belirlenmiştir
// Bütün üye fonksiyonları implement etmeniz beklenmektedir.


// Yardımcı olacaksa bu listede olmayan, ek başka fonksiyonlar yazabilirsiniz.
// Eğer ek fonksiyon yazarsanız yorumlarla bu fonksiyonların amacını açıklayın.

// Buraya Ad Soyad ve Öğrenci Numaranızın tamamını yazınız:

class listnode
{
public:
    string s;
    int count;
    listnode *next;
    listnode *prev;
    listnode();  
    listnode(const string & ss, const int &c);
};

class mylist
{
public:
    mylist();
    ~mylist();

    //pointeri verilen düğüm listenin elemanı ise True, değilse False dönmeli.
    bool isElement(listnode* ptr);

    void insertfront(const string &s, const int & c);
    void insertback(const string &s, const int & c);
    void insertbefore(listnode *ptr, const string &s, const int &c);
    void insertafter(listnode *ptr, const string &s, const int &c);
    void insertpos(const int & pos, const string &s, const int &c);

    listnode* front() const;
    listnode* back() const;
    int length() const;
    void removefront();
    void removeback();

    mylist(const mylist & l);

    mylist& operator=(const mylist  &l);

    //pointer'i verilen düğümler eğer her ikisi de listede bulunuyorsa, yerleri değiştirilip True dönecek, değilse False.
    bool swap(listnode* ptr1, listnode* ptr2); 

    //Pointer'i verilen düğümler eğer her ikisi de listede bulunuyorsa, Aşağıdaki işlemler yapılıp True dönecek, değilse False.
    //count1 ve s1 ilk düğümün üye alanları; count2 ve s2 ikinci düğümün üye alanları olmak üzere count1 += count2, ve s1+= s2 işlemi yapılacak.
    //Sonra ptr2'nin gösterdiği düğüm silinecek.
    bool mergenodes(listnode* ptr1, listnode* ptr2);


    listnode *search(const string &s);

    //count değeri en büyük olan düğümü bul
    listnode *findmaxcount();

    void remove(listnode * ptr);

    //count değeri en büyük olan düğümü sil
    void removemaxcount();

    //s parametresi, üye alandaki s değerine eşit olan bir düğüm varsa değerini 1 artır. Yoksa False dön.
    bool searchandinc (const string &s);

private:
    listnode *head;
    listnode *tail;
    int size;
};
