
LCALL INITIALIZE_LCD
MOV R0,#49H
MOV R1,#10H
MOV R2,#0

MOV A,R2

CJNE A,#0,CARPMADEGIL
MOV A,R0
MOV B,R1
MUL AB
MOV R7,A
MOV R6,B
LCALL ILKSAYI
LCALL ISLEM
YAZDIR:
LCALL IKINCISAYI
LCALL ESITTIR
LCALL SONUC
SJMP $
;buranin sonunda hex olarak carpma islemi tamamlandi. yazdirma islemine gecilmesi gerekiyor.

CARPMADEGIL:
CJNE A,#1,BOLMEDEGIL
MOV A,R0
MOV B,R1
DIV AB
MOV R7,A
MOV R6,#0
LCALL ILKSAYI
LCALL ISLEM
YAZDIR2:
LCALL IKINCISAYI
LCALL ESITTIR
LCALL SONUC
SJMP $
;buranin sonunda da bolme islemi tamamlandi. yazdirilmasi gerekiyor.

BOLMEDEGIL:
CJNE A,#2,TOPLAMADEGIL
MOV A,R0
ADD A,R1
JC ELDEVAR
MOV R7,A
MOV R6,#0
LCALL ILKSAYI
LCALL ISLEM
LCALL IKINCISAYI
LCALL ESITTIR
LCALL SONUC
SJMP $
ELDEVAR:
MOV R7,A
MOV R6,#1
LCALL ILKSAYI
LCALL ISLEM
LCALL IKINCISAYI
LCALL ESITTIR
LCALL SONUC
SJMP $

;carry kismini dusun sonra yazdirmaya yolla.

TOPLAMADEGIL:
CJNE A,#3,YANLISISLEM
MOV A,R0
SUBB A,R1
MOV R7,A
MOV R6,#0
LCALL ILKSAYI
LCALL ISLEM
LCALL IKINCISAYI
LCALL ESITTIR
LCALL SONUC
SJMP $
;cikarma islemi yapildi decimale cevirip yazdir.

YANLISISLEM:
SJMP $

ILKSAYI:

MOV A,R0

CJNE A,#100,DEVAM1
DEVAM1:
JC IKIBASAMAKLI1
MOV B,#100
DIV AB
ADD A,#30H
LCALL SEND_DATA
MOV A,B
IKIBASAMAKLI1:
MOV B,#10
DIV AB
ADD A,#30H
LCALL SEND_DATA
MOV A,B
ADD A,#30H
LCALL SEND_DATA

ISLEM:
MOV A,R2
CJNE A,#0,BOLME
MOV A,#'*'
LCALL SEND_DATA
LJMP YAZDIR

BOLME:
CJNE A,#1,TOPLAMA
MOV A,#'/'
LCALL SEND_DATA
LJMP YAZDIR2
TOPLAMA:
CJNE A,#2,CIKARMA
MOV A,#'+'
LCALL SEND_DATA
LJMP YAZDIR2

CIKARMA:
MOV A,#'-'
LCALL SEND_DATA
LJMP YAZDIR2

IKINCISAYI:
MOV A,R1
CJNE A,#100,DEVAM2
DEVAM2:
JC IKIBASAMAKLI2
MOV B,#100
DIV AB
ADD A,#30H
LCALL SEND_DATA
MOV A,B
IKIBASAMAKLI2:
MOV B,#10
DIV AB
ADD A,#30H
LCALL SEND_DATA
MOV A,B
ADD A,#30H
LCALL SEND_DATA

ESITTIR:
MOV A,#'='
LCALL SEND_DATA

SONUC:
MOV A,R6
CJNE A,#100,DEVAM4
DEVAM4:
JC IKIBASAMAKLI4
MOV B,#100
DIV AB
ADD A,#30H
LCALL SEND_DATA
MOV A,B
IKIBASAMAKLI4:
MOV B,#10
DIV AB
ADD A,#30H
LCALL SEND_DATA
MOV A,B
ADD A,#30H
LCALL SEND_DATA
MOV A,R7
CJNE A,#100,DEVAM3
DEVAM3:
JC IKIBASAMAKLI3
MOV B,#100
DIV AB
ADD A,#30H
LCALL SEND_DATA
MOV A,B
IKIBASAMAKLI3:
MOV B,#10
DIV AB
ADD A,#30H
LCALL SEND_DATA
MOV A,B
ADD A,#30H
LCALL SEND_DATA

HERE:LJMP HERE
INITIALIZE_LCD:
; initialise the display
; see instruction set for details
CLR P1.3	
; function set	
CLR P1.7		
CLR P1.6		
SETB P1.5		
CLR P1.4		; high nibble set
SETB P1.2		
CLR P1.2		; negative edge on E
LCALL DELAY	; wait for BF to clear
SETB P1.2		 
CLR P1.2		; negative edge on E
SETB P1.7		; low nibble set 
SETB P1.2		
CLR P1.2		; negative edge on E
LCALL DELAY	; wait for BF to clear	
CLR P1.7		 
CLR P1.6		
CLR P1.5		
CLR P1.4		; high nibble set
SETB P1.2		
CLR P1.2		; negative edge on E
SETB P1.6		
SETB P1.5		; low nibble set
SETB P1.2		
CLR P1.2		; negative edge on E
LCALL DELAY	; wait for BF to clear
CLR P1.7		
CLR P1.6		
CLR P1.5		
CLR P1.4		; high nibble set
SETB P1.2		 
CLR P1.2		; negative edge on E
SETB P1.7		
SETB P1.6		
SETB P1.5		
SETB P1.4		; low nibble set
SETB P1.2	 
CLR P1.2		; negative edge on E
LCALL DELAY ; wait for BF to clear

DELAY:
PUSH 0
MOV R0, #50
DJNZ R0, $
POP 0
RET

SEND_DATA: ;send the data located at A to LCD
SETB P1.3
NOP
MOV C, ACC.7		 
MOV P1.7, C		 
MOV C, ACC.6		 
MOV P1.6, C		 
MOV C, ACC.5		
MOV P1.5, C		
MOV C, ACC.4		 
MOV P1.4, C	; high nibble set
SETB P1.2		
CLR P1.2		; negative edge on E
MOV C, ACC.3		; 
MOV P1.7, C		; 
MOV C, ACC.2		; 
MOV P1.6, C		; 
MOV C, ACC.1		; 
MOV P1.5, C		; 
MOV C, ACC.0		; 
MOV P1.4, C		; low nibble set
SETB P1.2		; 
CLR P1.2		; negative edge on E
LCALL DELAY		; wait for BF to clear
RET